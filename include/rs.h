//-----------------------------------------------------------------------------
// File : rs.h
// Desc : Rendering System.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <a3d.h>
#include <functional>


namespace rs {

//-----------------------------------------------------------------------------
// Foward Declarations.
//-----------------------------------------------------------------------------
struct IPassBuilder;
struct IPassContext;
struct IHeap;

using PassSetup     = std::function<void(IPassBuilder*)>;
using PassExecute   = std::function<void(IPassContext*)>;


///////////////////////////////////////////////////////////////////////////////
// PASS_RESOURCE_STATE enum
///////////////////////////////////////////////////////////////////////////////
enum PASS_RESOURCE_STATE
{
    PASS_RESOURCE_STATE_NONE = 0,
    PASS_RESOURCE_STATE_CLEAR,
};

///////////////////////////////////////////////////////////////////////////////
// PASS_RESOURCE_FLAG enum
///////////////////////////////////////////////////////////////////////////////
enum PASS_RESOURCE_FLAG
{
    PASS_RESOURCE_FLAG_NONE = 0,
    PASS_RESOURCE_FLAG_UAV,
};

///////////////////////////////////////////////////////////////////////////////
// ClearValue structure
///////////////////////////////////////////////////////////////////////////////
struct ClearValue
{
    float       Color[4];
    float       Depth;
    uint8_t     Stencil;
};

///////////////////////////////////////////////////////////////////////////////
// PassTextureDesc structure
///////////////////////////////////////////////////////////////////////////////
struct PassTextureDesc
{
    uint32_t                Width;
    uint32_t                Height;
    a3d::RESOURCE_FORMAT    Format;
    PASS_RESOURCE_STATE     InitState;
    ClearValue              ClearValue;
};

///////////////////////////////////////////////////////////////////////////////
// PassImportTextureDesc structure
///////////////////////////////////////////////////////////////////////////////
struct PassImportTextureDesc
{
    a3d::ITexture*              pTexture;
    a3d::IRenderTargetView*     pRTV;
    a3d::IDepthStencilView*     pDSV;
    a3d::IShaderResourceView*   pSRV;
    a3d::IUnorderedAccessView*  pUAV;
};

///////////////////////////////////////////////////////////////////////////////
// PassGraphDesc structure
///////////////////////////////////////////////////////////////////////////////
struct PassGraphDesc
{
    uint32_t        MaxJobCount;
    uint32_t        MaxResourceCount;
    a3d::IDevice*   pDevice;
    a3d::IQueue*    pGraphicsQueue;
    a3d::IQueue*    pComputeQueue;
};

///////////////////////////////////////////////////////////////////////////////
// ResourceHandle class
///////////////////////////////////////////////////////////////////////////////
class ResourceHandle
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    friend class PassBuilder;
    friend class PassContext;
    friend class PassGraph;

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ResourceHandle() = default;

    //-------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //-------------------------------------------------------------------------
    ResourceHandle(const ResourceHandle& value)
    : m_Handle(value.m_Handle)
    { /* DO_NOTHING */ }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    uint32_t m_Handle = 0;      //!< リソースハンドル.

    //=========================================================================
    // private methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    ResourceHandle(uint32_t handle)
    : m_Handle(handle)
    { /* DO_NOTHING */ }
};

///////////////////////////////////////////////////////////////////////////////
// Tag class 
///////////////////////////////////////////////////////////////////////////////
class Tag
{
    //=========================================================================
    // list of fiend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    static const uint32_t MAX_TAG_COUNT = 64;

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Tag() = default;

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    Tag(const char* value);

    //-------------------------------------------------------------------------
    //! @brief      文字列を取得します.
    //! 
    //! @return     文字列を返却します.
    //-------------------------------------------------------------------------
    const char* c_str() const;

    //-------------------------------------------------------------------------
    //! @brief      文字列数を取得します.
    //! 
    //! @return     文字列数を返却します.
    //-------------------------------------------------------------------------
    size_t size() const;

    //-------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //! 
    //! @param[in]      value       代入する値.
    //! @return     代入結果を返却します.
    //-------------------------------------------------------------------------
    Tag& operator = (const Tag& value);

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    char m_Tags[MAX_TAG_COUNT] = {};

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// IHeap interface
///////////////////////////////////////////////////////////////////////////////
struct IHeap
{
    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~IHeap() = default;

    //-------------------------------------------------------------------------
    //! @brief      メモリを確保します.
    //-------------------------------------------------------------------------
    virtual void* Alloc(size_t size, size_t alignment) = 0;

    //-------------------------------------------------------------------------
    //! @brief      メモリを解放します.
    //-------------------------------------------------------------------------
    virtual void Free(void* ptr) = 0;
};

///////////////////////////////////////////////////////////////////////////////
// IPassBuilder interface
///////////////////////////////////////////////////////////////////////////////
struct IPassBuilder
{
    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~IPassBuilder() = default;

    //-------------------------------------------------------------------------
    //! @brief      リソースを読み取ります.
    //-------------------------------------------------------------------------
    virtual ResourceHandle Read(const ResourceHandle& resource, uint32_t flag) = 0;

    //-------------------------------------------------------------------------
    //! @brief      リソースを書き込みです.
    //-------------------------------------------------------------------------
    virtual ResourceHandle Write(const ResourceHandle& resource, uint32_t flag) = 0;

    //-------------------------------------------------------------------------
    //! @brief      リソースを生成します.
    //-------------------------------------------------------------------------
    virtual ResourceHandle Create(const PassTextureDesc& desc) = 0;

    //-------------------------------------------------------------------------
    //! @brief      リソースをインポートします.
    //-------------------------------------------------------------------------
    virtual ResourceHandle Import(const PassImportTextureDesc& desc) = 0;
};

///////////////////////////////////////////////////////////////////////////////
// IPassContext interface
///////////////////////////////////////////////////////////////////////////////
struct IPassContext
{
    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~IPassContext() = default;

    //-------------------------------------------------------------------------
    //! @brief      レンダーターゲットビューを取得します.
    //-------------------------------------------------------------------------
    virtual a3d::IRenderTargetView* GetRTV(const ResourceHandle& resource) const = 0;

    //-------------------------------------------------------------------------
    //! @brief      深度ステンシルビューを取得します.
    //-------------------------------------------------------------------------
    virtual a3d::IDepthStencilView* GetDSV(const ResourceHandle& resource) const = 0;

    //-------------------------------------------------------------------------
    //! @brief      アンオーダードアクセスビューを取得します.
    //-------------------------------------------------------------------------
    virtual a3d::IUnorderedAccessView* GetUAV(const ResourceHandle& resource) const = 0;

    //-------------------------------------------------------------------------
    //! @brief      シェーダリソースビューを取得します.
    //-------------------------------------------------------------------------
    virtual a3d::IShaderResourceView* GetSRV(const ResourceHandle& resource) const = 0;

    //-------------------------------------------------------------------------
    //! @brief      コマンドリストを取得します.
    //-------------------------------------------------------------------------
    virtual a3d::ICommandList* GetCommandList() const = 0;
};

///////////////////////////////////////////////////////////////////////////////
// IJob interface
///////////////////////////////////////////////////////////////////////////////
struct IJob
{
    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~IJob() = default;

    //-------------------------------------------------------------------------
    //! @brief      処理を実行します.
    //-------------------------------------------------------------------------
    virtual void Execute() = 0;
};

///////////////////////////////////////////////////////////////////////////////
// IPassGraph interface
///////////////////////////////////////////////////////////////////////////////
struct IPassGraph
{
    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~IPassGraph() = default;

    //-------------------------------------------------------------------------
    //! @brief      参照カウントを増やします.
    //-------------------------------------------------------------------------
    virtual void AddRef() = 0;

    //-------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //-------------------------------------------------------------------------
    virtual void Release() = 0;

    //-------------------------------------------------------------------------
    //! @brief      参照カウントを取得します.
    //-------------------------------------------------------------------------
    virtual uint32_t GetRefCount() const = 0;

    //-------------------------------------------------------------------------
    //! @brief      パスを追加します.
    //-------------------------------------------------------------------------
    virtual bool AddPass(const Tag& tag, PassSetup setup, PassExecute execute) = 0;

    //-------------------------------------------------------------------------
    //! @brief      コンパイルします.
    //-------------------------------------------------------------------------
    virtual void Compile() = 0;

    //-------------------------------------------------------------------------
    //! @brief      ジョブ数を取得します.
    //-------------------------------------------------------------------------
    virtual uint32_t GetJobCount() const = 0;

    //-------------------------------------------------------------------------
    //! @brief      ジョブを取得します.
    //-------------------------------------------------------------------------
    virtual IJob* GetJob(uint32_t index) const = 0;

    //-------------------------------------------------------------------------
    //! @brief      指定されたコマンドキューにコマンドリストをコミットします.
    //-------------------------------------------------------------------------
    virtual void Commit() = 0;
};

//-----------------------------------------------------------------------------
//! @brief      システムを初期化します.
//! 
//! @param[in]      pHeap       ヒープです.
//! @retval true    初期化に成功.
//! @retval false   初期化に失敗.
//-----------------------------------------------------------------------------
bool InitSystem(IHeap* pHeap);

//-----------------------------------------------------------------------------
//! @brief      システムを終了します.
//-----------------------------------------------------------------------------
void TermSystem();

//-----------------------------------------------------------------------------
//! @brief      システムが初期化済みかどうかチェックします.
//! 
//! @retval true    初期化済みです.
//! @retval false   未初期化です.
//-----------------------------------------------------------------------------
bool IsInitSystem();

//-----------------------------------------------------------------------------
//! @brief      パスグラフを生成します.
//! 
//! @param[in]      desc        構成設定.
//! @param[out]     ppGraph     パスグラフの格納先.
//! @retval true    生成に成功.
//! @retval false   生成に失敗.
//-----------------------------------------------------------------------------
bool CreatePassGraph(const PassGraphDesc& desc, IPassGraph** ppGraph);


} // namespace rs
