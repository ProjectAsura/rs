//-----------------------------------------------------------------------------
// File : rsPassGraph.
// Desc : Pass Graph.
// Copyright(c) Project Asura. All right resreved.
//-----------------------------------------------------------------------------
#pragma once


namespace rs {

///////////////////////////////////////////////////////////////////////////////
// PassGraph class
///////////////////////////////////////////////////////////////////////////////
class PassGraph : public IPassGraph, public BaseAllocator
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      生成処理を行います.
    //-------------------------------------------------------------------------
    static bool Create(const PassGraphDesc& desc, IPassGraph** ppGraph);

    //-------------------------------------------------------------------------
    //! @brief      参照カウントを増やします.
    //-------------------------------------------------------------------------
    void AddRef() override;

    //-------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //-------------------------------------------------------------------------
    void Release() override;

    //-------------------------------------------------------------------------
    //! @brief      参照カウント数を取得します.
    //-------------------------------------------------------------------------
    uint32_t GetRefCount() const override;

    //-------------------------------------------------------------------------
    //! @brief      パスを追加します.
    //-------------------------------------------------------------------------
    bool AddPass(const Tag& tag, PassSetup setup, PassExecute execute) override;

    //-------------------------------------------------------------------------
    //! @brief      コンパイル処理を行います.
    //-------------------------------------------------------------------------
    void Compile() override;

    //-------------------------------------------------------------------------
    //! @brief      ジョブ数を取得します.
    //-------------------------------------------------------------------------
    uint32_t GetJobCount() const override;

    //-------------------------------------------------------------------------
    //! @brief      ジョブを取得します.
    //-------------------------------------------------------------------------
    IJob* GetJob(uint32_t index) const override;

    //-------------------------------------------------------------------------
    //! @brief      指定されたコマンドキューにコミットします.
    //-------------------------------------------------------------------------
    void Commit() override;

    //-------------------------------------------------------------------------
    //! @brief      取得または生成を行います.
    //-------------------------------------------------------------------------
    ResourceHandle GetOrCreate(const PassTextureDesc& desc);

    //-------------------------------------------------------------------------
    //! @brief      レンダーターゲットビューを取得します.
    //-------------------------------------------------------------------------
    a3d::IRenderTargetView* GetRTV(const ResourceHandle& handle) const;

    //-------------------------------------------------------------------------
    //! @brief      深度ステンシルビューを取得します.
    //-------------------------------------------------------------------------
    a3d::IDepthStencilView* GetDSV(const ResourceHandle& handle) const;

    //-------------------------------------------------------------------------
    //! @brief      アンオーダードアクセスビューを取得します.
    //-------------------------------------------------------------------------
    a3d::IUnorderedAccessView* GetUAV(const ResourceHandle& handle) const;

    //-------------------------------------------------------------------------
    //! @brief      シェーダリソースビューを取得します.
    //-------------------------------------------------------------------------
    a3d::IShaderResourceView* GetSRV(const ResourceHandle& handle) const;

    //-------------------------------------------------------------------------
    //! @brief      1フレーム限り有効なメモリ確保を行います.
    //-------------------------------------------------------------------------
    template<typename T>
    T* FrameAlloc()
    {
        auto ptr = m_FrameHeap.Alloc<T>();
        RS_ASSERT(ptr != nullptr);
        return ptr;
    }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::atomic<uint32_t>   m_RefCount;                 //!< 参照カウンタです.
    a3d::IDevice*           m_pDevice       = nullptr;  //!< デバイスです.
    a3d::IQueue*            m_pGraphicQueue = nullptr;  //!< グラフィックスキューです.
    a3d::IQueue*            m_pComputeQueue = nullptr;  //!< コンピュートキューです.
    uint32_t                m_JobCount      = 0;        //!< ジョブ数です.
    Job*                    m_pJobs         = nullptr;  //!< ジョブです.
    uint8_t                 m_FrameIndex    = 0;        //!< フレームインデックスです.
    FrameHeap               m_FrameHeap[2];             //!< フレームヒープです.
    List<Pass>              m_Passes;                   //!< パスリストです.

    //=========================================================================
    // private methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    PassGraph();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~PassGraph();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(const PassGraphDesc& desc);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    PassGraph               (const PassGraph&) = delete;
    PassGraph& operator =   (const PassGraph&) = delete;
};

} // namespace rs
